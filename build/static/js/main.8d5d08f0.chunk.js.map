{"version":3,"sources":["components/Note.jsx","sevices/notes.js","components/error.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","Fragment","content","onClick","baseUrl","sevices_notes","axios","get","then","response","data","newObject","post","res","id","put","concat","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteServices","notesToShow","filter","error","map","ele","components_Note","key","find","changedNote","objectSpread","catch","setTimeout","n","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Math","random","length","onChange","target","value","type","components_Footer","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.8d5d08f0.chunk.js","sourcesContent":["import React from 'react';\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n  return (\n      <>\n        <li>{note.content}</li>\n        <button onClick={toggleImportance}>{label}</button>\n      </>\n    )\n  }\n  \n  export default Note","import axios from 'axios'\nconst baseUrl = 'https://jstest-yslq.onrender.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject).then(res => res.data)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject).then(res => res.data)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update \n}","import React from 'react';\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className='error'>\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import React from \"react\"\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\n      </div>\n    )\n  }\nexport default Footer","import { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport React from 'react';\nimport noteServices from './sevices/notes'\nimport Notification from \"./components/error\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteServices.getAll()\n      .then(response => {\n        setNotes(response)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    }\n  \n    noteServices.create(noteObject)\n    .then(response => {\n      setNotes(notes.concat(response));\n      setNewNote('');\n    })\n  }\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(note => note.id === id)\n    const changedNote = {...note, important: !note.important}\n    noteServices.update(id, changedNote)\n    .then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : response))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll \n    ? notes \n    : notes.filter(note => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"impotant\" : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(ele => \n          <Note key={ele.id} note={ele} toggleImportance = {() => toggleImportanceOf(ele.id)}></Note>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input onChange={handleChange} value={newNote}/>\n        <button type=\"submit\">save</button>\n      </form>  \n      <Footer></Footer>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <App/>\n)"],"sourceRoot":""}